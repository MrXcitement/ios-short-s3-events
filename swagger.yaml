swagger: '2.0'

info:
  version: '1.0.0'
  title: 'Events'
  description: 'Microservice for creating, retrieving, updating, and deleting events.'
  contact:
    name: Jarrod Parkes
    email: jarrod@udacity.com
    url: http://jarrodparkes.com
  license:
    name: MIT License

schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

paths:
  /events:
    get:
      description: Returns events.
      summary: Returns events.
      parameters:
       - name: limit
         in: query
         description: Number of events returned. Limit is 50.
         type: integer
       - name: page
         in: query
         description: Page number.
         type: integer
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/GetEvent'
        401:
          $ref: "#/responses/Unauthorized"
    post:
      description: Creates a new event.
      summary: Creates a new event.
      parameters:
        - name: event
          in: body
          description: Data for a new event.
          required: true
          schema:
            $ref: '#/definitions/PostEvent'
      responses:
        201:
          description: Event created.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: "#/responses/NotModified"            
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'
        401:
          $ref: "#/responses/Unauthorized"
  /events/{id}:
    get:
      description: Returns event with ID.
      summary: Returns event with ID.
      parameters:
        - name: id
          in: path
          description: ID of event to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful response.
          schema:
            $ref: '#/definitions/GetEvent'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    put:
      description: Updates an event with ID.
      summary: Updates an event with ID.
      parameters:
        - name: id
          in: path
          description: ID of event to fetch
          required: true
          type: integer
          format: int64
        - name: event
          in: body
          description: Data to update an existing event.
          required: true
          schema:
            $ref: '#/definitions/PutEvent'  
      responses:
        200:
          description: Event updated.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: "#/responses/NotModified"            
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'
        401:
          $ref: "#/responses/Unauthorized"           
    delete:
      description: Deletes event with ID.
      summary: Deletes event with ID.
      parameters:
        - name: id
          in: path
          description: ID of event to delete
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: Activity deleted.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: "#/responses/NotModified"              
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'           
        401:
          $ref: "#/responses/Unauthorized"
  /rsvps/{id}:
    patch:
      description: Invite new users to an event.
      summary: Invite new users to an event.
      parameters:
        - name: id
          in: path
          description: ID of event
          required: true
          type: integer
          format: int64
        - name: rsvps
          in: body
          description: Attendees to invite.
          required: true
          schema:
            $ref: '#/definitions/Attendees'            
      responses:
        201:
          description: Users invited.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: "#/responses/NotModified"            
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'
        401:
          $ref: "#/responses/Unauthorized"

responses:
  NoContent:
    description: The request was fulfilled, but nothing to return.
  BadRequest:
    description: Invalid request.
  NotModified:
    description: The specified resource was not modified.
  NotFound:
    description: The specified resource was not found.
  Unauthorized:
    description: Unauthorized.

definitions:
  GetEvent:
    allOf:
      - $ref: '#/definitions/ResponseEvent'
      - required:
        - id
        properties:
          id:
            type: string
            description: ID of event.
            readOnly: true
            default: "1"
  PostEvent:
    allOf:
      - $ref: '#/definitions/BaseEvent'
      - type: object
        properties:
          activities:
            type: array
            description: IDs of activities for event.
            readOnly: true
            items:
              type: string
              default: "3"
          attendees:
            type: array
            description: IDs of users to invite to event.
            readOnly: true
            items:
              type: string
              default: "4"
        required:
          - activities
          - attendees
  PutEvent:
    allOf:
      - $ref: '#/definitions/BaseEvent'
      - type: object
        properties:
          activities:
            type: array
            description: IDs of activities for event.
            readOnly: true
            items:
              type: string
              default: "3"
        required:
          - activities
  Attendees:
    type: object
    properties:
      attendees:
        type: array
        description: IDs of users to invite to event.
        readOnly: true
        items:
          type: string
          default: "4"
    required:
      - attendees
  ResponseEvent:
    allOf:
      - $ref: '#/definitions/BaseEvent'
      - type: object
        properties:
          attendees:
            type: array
            description: RSVPs for event.
            readOnly: true
            items:
              $ref: '#/definitions/RSVP'
          activities:
            type: array
            description: IDs of activities for event.
            readOnly: true
            items:
              type: string
              default: "3"
        required:
          - attendees
          - activities
  BaseEvent:
    type: object
    properties:
      name:
        type: string
        description: Name of event.
        default: "Game night at Angela's"
      emoji:
        type: string
        description: Emoji representing event.
        default: "ðŸ’¥"
      description:
        type: string
        description: Description of event.
        default: "It's that time again. Trivial Pursuit and Monopoly."
      host:
        type: string
        description: ID of user hosting event.
        default: "1"
      start_time:
        type: string
        description: Start time of event.
        format: YYYY-mm-dd HH:mm:ss
        default: "2017-07-24 20:43:51"
      location:
        type: string
        description: Location of event.
        default: "San Francisco"
      public:
        type: boolean
        description: Is the event public or private?
        default: false
      created_at:
        type: string
        description: Date event was created.
        format: YYYY-mm-dd HH:mm:ss
        default: "2017-07-24 20:43:51"
      updated_at:
        type: string
        description: Date event was created.
        format: YYYY-mm-dd HH:mm:ss
        default: "2017-07-24 20:43:51"
    required:
      - name
      - emoji
      - description
      - host
      - start_time
      - location
      - public
      - updated_at
      - created_at
  RSVP:
    type: object
    properties:
      event_id:
        type: integer
        description: Event's ID.
        default: "1"
      user_id:
        type: integer
        description: User's ID.
        default: "1"
      accepted:
        type: boolean
        description: Is the user coming to the event?
        default: true
      comment:
        type: string
        description: Response to RSVP.
        default: "I'm coming"
    required:
      - event_id
      - user_id
      - accepted
      - comment
  Message:
    type: object
    properties:
      message:
        type: string
        description: A message.
    required:
      - message
    example:
      message: "A message describing the HTTP status code."