swagger: '2.0'

info:
  version: '1.0.0'
  title: 'Events Microservice'
  description: 'Microservice for creating, retrieving, updating, and deleting events.'
  contact:
    name: Jarrod Parkes
    email: jarrod@udacity.com
    url: http://jarrodparkes.com
  license:
    name: MIT License

schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

paths:
  /events:
    get:
      description: List events.
      summary: List events.
      parameters:
       - name: page_size
         in: query
         description: Number of events returned. Limit is 50.
         type: integer
       - name: page_number
         in: query
         description: Page number.
         type: integer  
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/GetEvent'
        401:
          $ref: "#/responses/Unauthorized"
      security:
        - JWT: []           
    post:
      description: Create a new event.
      summary: Create a new event.
      parameters:
        - name: event
          in: body
          description: Data for a new event.
          required: true
          schema:
            $ref: '#/definitions/PostEvent'
      responses:
        201:
          description: Event created.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: "#/responses/NotModified"            
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'
        401:
          $ref: "#/responses/Unauthorized"
      security:
        - JWT: []           
  /events/search:
    get:
      description: List and filter events.
      summary: List and filter events.
      parameters:
       - name: page_size
         in: query
         description: Number of events returned. Limit is 50.
         type: integer
       - name: page_number
         in: query
         description: Page number.
         type: integer
       - name: filter
         in: body
         description: Properties for filtering search.
         schema:
           type: object
           properties:
            id:
              type: array
              description: IDs of events to filter.
              items:
                type: string
                default: "3"
            type:
              type: string
              description: Type of events to filter (upcoming|past).
              default: "upcoming"
            location:
              type: object
              description: Maximum distance to events to filter.
              $ref: '#/definitions/Location'
           required:
              - id
              - type
              - location
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/GetEvent'
        401:
          $ref: "#/responses/Unauthorized" 
      security:
        - JWT: []           
  /events/{id}:
    get:
      description: Get information about an event.
      summary: Get information about an event.
      parameters:
        - name: id
          in: path
          description: ID of event to fetch.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful response.
          schema:
            $ref: '#/definitions/GetEvent'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
      security:
        - JWT: []           
    put:
      description: Update an event.
      summary: Update an event.
      parameters:
        - name: id
          in: path
          description: ID of event to fetch.
          required: true
          type: integer
          format: int64
        - name: event
          in: body
          description: Data to update an existing event.
          required: true
          schema:
            $ref: '#/definitions/PutEvent'  
      responses:
        200:
          description: Event updated.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: "#/responses/NotModified"            
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'
        401:
          $ref: "#/responses/Unauthorized"     
      security:
        - JWT: []           
    delete:
      description: Delete an event.
      summary: Delete an event.
      parameters:
        - name: id
          in: path
          description: ID of event to delete.
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: Event deleted.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: "#/responses/NotModified"              
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'           
        401:
          $ref: "#/responses/Unauthorized"
      security:
        - JWT: []           
  /events/{id}/rsvps:
    get:
      description: List RSVPs for an event.
      summary: List RSVPs for an event.
      parameters:
        - name: id
          in: path
          description: ID of event to fetch RSVPs.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/RSVP'
        401:
          $ref: "#/responses/Unauthorized" 
      security:
        - JWT: []           
    post:
      description: Create RSVPs for an event.
      summary: Create RSVPs for an event.
      parameters:
        - name: id
          in: path
          description: ID of event to create RSVPs.
          required: true
          type: integer
          format: int64
        - name: invite_users
          in: body
          description: Users to invite.
          required: true
          schema:
            $ref: '#/definitions/InviteUsers'            
      responses:
        201:
          description: Users invited.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: "#/responses/NotModified"            
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'
        401:
          $ref: "#/responses/Unauthorized"
      security:
        - JWT: []           
  /events/{id}/rsvps/{rsvp_id}:
    put:
      description: Update a RSVP for an event.
      summary: Update a RSVP for an event.
      parameters:
        - name: id
          in: path
          description: ID of event.
          required: true
          type: integer
          format: int64
        - name: rsvp_id
          in: path
          description: ID of RSVP to update.
          required: true
          type: integer
          format: int64     
        - name: rsvp_response
          in: body
          description: Response to RSVP.
          required: true
          schema:
            $ref: '#/definitions/RSVPResponse'             
      responses:
        200:
          description: RSVP updated.
          schema:
            $ref: '#/definitions/Message'
        304:
          $ref: "#/responses/NotModified"            
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'
        401:
          $ref: "#/responses/Unauthorized" 
      security:
        - JWT: []           

responses:
  NoContent:
    description: The request was fulfilled, but nothing to return.
  BadRequest:
    description: Invalid request.
  NotModified:
    description: The specified resource was not modified.
  NotFound:
    description: The specified resource was not found.
  Unauthorized:
    description: Unauthorized.

securityDefinitions:
  JWT:
    type: apiKey
    description: A Base64-encoded JSON web token.
    name: "Authorization: Bearer"
    in: header

definitions:
  GetEvent:
    allOf:
      - $ref: '#/definitions/ResponseEvent'
      - required:
        - id
        properties:
          id:
            type: string
            description: ID of event.
            readOnly: true
            default: "1"
  PostEvent:
    allOf:
      - $ref: '#/definitions/BaseEvent'
      - type: object
        properties:
          activities:
            type: array
            description: IDs of activities for event.
            readOnly: true
            items:
              type: string
              default: "3"
          invite_users:
            type: array
            description: IDs of users to invite to event.
            readOnly: true
            items:
              type: string
              default: "4"
        required:
          - activities
          - invite_users
  PutEvent:
    allOf:
      - $ref: '#/definitions/BaseEvent'
      - type: object
        properties:
          activities:
            type: array
            description: IDs of activities for event.
            readOnly: true
            items:
              type: string
              default: "3"
        required:
          - activities
  InviteUsers:
    type: object
    properties:
      invite_users:
        type: array
        description: IDs of users to invite to event.
        readOnly: true
        items:
          type: string
          default: "4"
    required:
      - invite_users
  ResponseEvent:
    allOf:
      - $ref: '#/definitions/BaseEvent'
      - type: object
        properties:
          rsvps:
            type: array
            description: RSVPs for event.
            readOnly: true
            items:
              $ref: '#/definitions/RSVP'
          activities:
            type: array
            description: IDs of activities for event.
            readOnly: true
            items:
              type: string
              default: "3"
        required:
          - rsvps
          - activities
  BaseEvent:
    type: object
    properties:
      name:
        type: string
        description: Name of event.
        default: "Game night at Angela's"
      emoji:
        type: string
        description: Emoji representing event.
        default: "💥"
      description:
        type: string
        description: Description of event.
        default: "It's that time again. Trivial Pursuit and Monopoly."
      host:
        type: string
        description: ID of user hosting event.
        default: "1"
      start_time:
        type: string
        description: Start time of event.
        format: YYYY-mm-dd HH:mm:ss
        default: "2017-07-24 20:43:51"
      location:
        type: string
        description: Location of event.
        default: "San Francisco"
      latitude:
        type: number
        format: double
        description: Latitude of event. Signed latitude without compass direction [-90, 90]. Negative indicates south, positive indicates north.
        default: 37.7749
      longitude:
        type: number
        format: double
        description: Longitude of event. Signed longitude without compass direction [-180, 180]. Negative indicates west, positive indicates east.
        default: -122.4194
      is_public:
        type: boolean
        description: Is the event public? If false, it's private.
        default: false
      created_at:
        type: string
        description: Date event was created.
        format: YYYY-mm-dd HH:mm:ss
        default: "2017-07-24 20:43:51"
      updated_at:
        type: string
        description: Date event was created.
        format: YYYY-mm-dd HH:mm:ss
        default: "2017-07-24 20:43:51"
    required:
      - name
      - emoji
      - description
      - host
      - start_time
      - location
      - latitude
      - longitude
      - is_public
      - updated_at
      - created_at
  RSVP:
    type: object
    properties:
      user_id:
        type: integer
        description: User's ID.
        default: "1"
      accepted:
        type: boolean
        description: Is the user coming to the event?
        default: true
      comment:
        type: string
        description: Response to RSVP.
        default: "I'm coming"
    required:
      - user_id
      - accepted
      - comment
  Location:
    type: object
    properties:
      distance:
        type: number
        format: double
        description: Distance in miles.
      from_latitude:
        type: number
        format: double
        description: Signed latitude without compass direction [-90, 90]. Negative indicates south, positive indicates north.
      from_longitude:
        type: number
        format: double
        description: Signed longitude without compass direction [-180, 180]. Negative indicates west, positive indicates east.
    required:
      - distance  
      - from_latitude
      - from_longitude
    default:
      distance: 10.0
      from_longitude: 0.0
      from_latitude: 0.0
  RSVPResponse:
    type: object
    properties:
      accepted:
        type: boolean
        description: True to accept RSVP. False to decline RSVP.
      comment:
        type: string
        description: Describe response to RSVP.
    required:
      - accepted
      - comment
    default:
      accepted: true
      description: "I'm coming!"
  Message:
    type: object
    properties:
      message:
        type: string
        description: A message.
    required:
      - message
    default:
      message: "A message describing the HTTP status code."